For more hints look at the "Assets/Example.mkv". Before committing the homework, delete the "Assets/Example.mkv".
1. Prepare the scene for gate pooling logic
    a. Delete all predefined gates from the scene.
2. Gates Pool:
    b. Use the uploaded prefab from "Assets\Prefabs\Gate.prefab" to spawn the new gates. The gate prefab has a script attached to "Gate.cs" to disable and enable itself. Use it as a hint of how it works.
    c. Create an empty object "Gates".
    d. Create "GatesController.cs" file. Attach it to Gates gameObject.
    e. Open the "GatesController.cs".
    f. Write a method that will get the next NOT active gate. If it doesn't have any inactive gates, create a new gate.
    g. Write a method that will get the available gate from the previous method and transform the gate with random rotation and position related to the last passed from the player gate.
    h. The target of all gates pool count is from 3 or more gates.
3. GameManager:
    a. Watch the video lesson again before starting working on that task.
    b. Create a GameManager.cs script.
    c. Only the GameManager.cs will know for the UI.cs (have reference to the component) and will control it.
    d. Move the ColliderDetector.cs (plane gameobject) logic into GameManager.cs. To do that use UnityEvent.Invoke() when the plane hits and trigger something will triggers methods into GameManager.cs.
    e. Optional: Add a "Obstacle" tag into Tag Manager. Use to gather objects on ColliderDetector.cs OnTriggerEnter().
    f. Move all "game rules" from other scripts into GameManager.cs use the Coroutines and UnityEvents to decouple the components.
    g. Create enum called "GameState" inside the GameManager.cs. Add states: 
        i. "Playing" - when the player plays the game.
        ii. "Dead" - indicates when the player crashes the plane.
        iii. "Fail" - indicates when the player fails to pass the max Gates count.
        iv. "Passed" indicates when the player passed all gates.
    h. Add public static GameState State into GameManager.cs. Control the game through that field when use it inside the requered scripts e.g. 
        i. UI.cs - When is dead, succes or fail show the propper gamescreen.
        ii. PlaneAudio.cs - for pitch sound effect.
    i. If the tasks are too hard for you always you can go and see the solved tasks in https://github.com/Kaloyan-kasskata-Anastasov/course_unity3d_basics/tree/homework